{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"main body": {
		"scope": "python",
		"prefix": "__main",
		"body": [
			"if __name__ == \"__main__\":",
			"\texit(main())"
		],
		"description": "Body for __main__ part"
	},
	"Script with argparse": {
		"prefix": "swa",
		"body": [
			"#!/usr/bin/env python",
			"",
			"",
			"\"\"\"",
			"--------------------------------------------------------",
			"${1:Short description of the script}",
			"--------------------------------------------------------",
			"\"\"\"",
			"",
			"import sys",
			"import argparse",
			"from pathlib import Path",
			"",
			"",
			"def get_options(argv):",
			"    script = Path(__file__).name",
			"    parser = argparse.ArgumentParser(",
			"        description=__doc__,",
			"        usage=f\"{script} -i FILE -o FILE --foo ${3:bar}\",",
			"    )",
			"    mandatory = parser.add_argument_group(\"Mandatory arguments\")",
			"    mandatory.add_argument(",
			"        \"--input\",",
			"        \"-i\",",
			"        help=(",
			"            \"FILE Description of input file\"",
			"        ),",
			"        required=True,",
			"    )",
			"    mandatory.add_argument(",
			"        \"--out\",",
			"        \"-o\",",
			"        help=\"FILE Description of output file\",",
			"        required=True,",
			"    )",
			"    mandatory.add_argument(",
			"        \"--foo\",",
			"        \"-f\",",
			"        type=int,",
			"        default=2,",
			"        help=(",
			"            \"An example option. [%(default)d]\"",
			"        ),",
			"        dest=\"bar\",",
			"    )",
			"    return parser.parse_args(argv)",
			"",
			"",
			"def no_flags():",
			"    print(",
			"        \"Please re-run the command with -h to get usage instructions and a\\",
			" complete list of options\\n\"",
			"    )",
			"    exit()",
			"",
			"",
			"def validate_options(opts):",
			"    # Check if input exists",
			"    if not Path(opts.input).is_file():",
			"        print(f\"Could not find input file: {opts.input}\")",
			"        sys.exit(1)",
			"    if not Path(opts.out).parent.is_dir():",
			"        print(f\"Could not find output file: {opts.out}\")",
			"        sys.exit(1)",
			"    return",
			"",
			"",
			"def main():",
			"    if len(sys.argv) == 1:",
			"        no_flags()",
			"    elif len(sys.argv) > 1:",
			"        opts = get_options(sys.argv[1:])",
			"        validate_options(opts)",
			"",
			"",
			"if __name__ == \"__main__\":",
			"    exit(main())",
			""
		],
		"description": "Script with argparse"
	}
}