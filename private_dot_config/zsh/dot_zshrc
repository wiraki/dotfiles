# zmodload zsh/zprof

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.config/zsh/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Set the directory we want to store zinit and plugins
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Download Zinit, if it's not there yet
if [ ! -d "$ZINIT_HOME" ]; then
  mkdir -p "$(dirname $ZINIT_HOME)"
  git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Source/Load zinit
source "${ZINIT_HOME}/zinit.zsh"

# Add PowerLevel10K
zinit ice depth=1; zinit light romkatv/powerlevel10k

# Add zsh plugins
zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
zinit light Aloxaf/fzf-tab

# Load completions
autoload -Uz compinit && compinit
if [[ -n $(print ~/.zcompdump(Nmh+24)) ]] {
  # Regenerate completions because the dump file hasn't been modified within the last 24 hours
  compinit
} else {
  # Reuse the existing completions file
  compinit -C
}

# For better performance: (check zinit documentation)
zinit cdreplay -q

# Enable completion descriptions to show the types
zstyle ':completion:*:descriptions' format '#%d'
# Custom commands
backward-kill-dir() {
	local WORDCHARS=${WORDCHARS/\//}
	zle backward-kill-word
	zle -f kill # Ensures that after repeated backward-kill-dir, Ctrl+Y will restore all of them.
}
zle -N backward-kill-dir

my-backward-kill-word() {
	# Add colon, comma, single/double quotes to word chars
	local WORDCHARS='*?_-.[]~=/&;!#$%^(){}<>:,"'"'"
	zle -f kill # Append to the kill ring on subsequent kills.
	zle backward-kill-word
}
zle -N my-backward-kill-word

# Custom keybinds
bindkey "\C-k" vi-kill-eol
bindkey '^f' backward-kill-dir
bindkey '^w' my-backward-kill-word
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word

########### Completion styling
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
# Enable completion descriptions to show the types
zstyle ':completion:*:descriptions' format '#%d'
# disable default zsh completion menu
zstyle ':completion:*' menu no
# Group the completions by type
zstyle ':completion:*' group-name ''
# Customize fzf-tab completions
zstyle ':fzf-tab:*' show-group full
# Change keybinding to switch groups
zstyle ':fzf-tab:*' switch-group ctrl-h ctrl-l
# Show type even when only one group
zstyle ':fzf-tab:*' single-group color header
# Add directory preview when completing cd or ls etc.
zstyle ':fzf-tab:complete:(cd|ls|ll|lsd|lsdd|j|eza):*' fzf-preview '[[ -d $realpath ]] && eza -1 --color=always $realpath'
# Increase fzf prompt size
zstyle ':fzf-tab:*' fzf-pad 5
zstyle ':fzf-tab:*' fzf-min-height 20
# Accept input as result when ctrl-c
zstyle ':fzf-tab:*' print-query ctrl-c
# Accept selected entry on enter (disabled for now)
# zstyle ':fzf-tab:*' accept-line enter
# Add file content preview for relevant commands
zstyle ':fzf-tab:complete:((micro|cut|cp|mv|rm|bat|less|code|nano|atom|vd|nvim|kvim|zvim):argument-rest|kate:*)' fzf-preview 'bat --color=always -- $realpath 2>/dev/null || ls --color=always -- $realpath'

# Setup pyenv
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"

# Shell integrations
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
eval "$(fzf --zsh)"
eval "$(zoxide init --cmd cd zsh)"
eval "$(navi widget zsh)"
eval "$(atuin init zsh)"
eval "$(pyenv init -)"
## Use the function wrappers below when benchmarking with zprof
# brews~() eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
# fzfs~() eval "$(fzf --zsh)"
# zoxides~() eval "$(zoxide init --cmd cd zsh)"
# navis~() eval "$(navi widget zsh)"
# atuins~() eval "$(atuin init zsh)"
# pyenvs~() eval "$(pyenv init -)"
# for f in $functions[(I)*s~]; do $f; unfunction $f; done

# Configure command used for **<TAB> completion
_fzf_compgen_path() {
  fd --no-ignore-vcs --hidden --follow --exclude ".git" --exclude "conf" . "$1"
}

# # nvm configuration
# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm

# Shell wrapper that provides the ability to change the current working directory when exiting Yazi
function yy() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd "$cwd"
	fi
	rm -f -- "$tmp"
}

# Override history size limits
export HISTSIZE=1000000000
export SAVEHIST=$HISTSIZE

# Source kitty_keys to print keybinds
# Now "kitty_keys" command is available
[[ ! -f ~/software/kitty_keys/kitty_keys.sh ]] || source ~/software/kitty_keys/kitty_keys.sh

# Load my aliases
[[ ! -f ~/.config/zsh/my-aliases.zsh ]] || source ~/.config/zsh/my-aliases.zsh

# To customize prompt, run `p10k configure` or edit ~/.config/zsh/.p10k.zsh.
[[ ! -f ~/.config/zsh/.p10k.zsh ]] || source ~/.config/zsh/.p10k.zsh

# zprof
